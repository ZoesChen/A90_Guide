
import os
"""
    name:offset size
"""
par_tab = (
    ("uboot", "0x0", "0x60000"),
    ("NV_RO", "0x40000", "0x8000"),
    ("NV_RW", "0x48000", "0x18000"),
    ("jffs2fs", "0x60000", "0xa0000"),
    ("kernel", "0x1000000", "0x300000"),
    ("updatefs", "0x4000000", "0x400000"),
    ("userfs", "0x8000000", "0x1800000"),
)
g_par_name = "partitions.tab"
def create_partition(par_name):
    par_fd = open(par_name,'w')
    buf = "\t# DO NOT MODIFY.\n"
    par_fd.write(buf)
    buf = "\t# This file was generated by partition.py.\n"
    par_fd.write(buf)
    buf = "partition:\n"
    par_fd.write(buf)
    buf = "\t#%10s %10s %10s %10s %10s\n"\
          %("name", "offset", "size", "charname", "blockname")
    par_fd.write(buf)
    for row in range(0, len(par_tab)):
        for col in range(0, len(par_tab[row])):
            if col == 0:
                buf = "\t%9s:" %(par_tab[row][col])
            else:
                buf = "%s %10s," %(buf, par_tab[row][col])

        charname = "mtd%d" %(row)
        blockname = "mtdblock%d" %(row)
        buf = "%s %8s, %10s\n" %(buf, charname, blockname)
        print buf
        par_fd.write(buf)
    par_fd .close()
    pass
def main():
    cur_path = os.getcwd()
    par_name = os.path.join(cur_path, ('%s'%(g_par_name)))
    create_partition(par_name)
    pass

if __name__ == '__main__':
    main()
__author__ = 'bliu'
